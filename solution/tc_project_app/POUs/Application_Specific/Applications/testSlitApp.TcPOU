<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="testSlitApp" Id="{02dd3d5e-b93a-47d0-a30a-b16df70390e6}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM testSlitApp
VAR
    southBlade_ID : UINT := 2;
    northBlade_ID : UINT := 1;   
    VG_ID : UINT := 3;
    VC_ID : UINT := 4;
    bEnable : BOOL :=FALSE;
    
    
    
    fGapSizePosition: LREAL;
    iGapSizePosition AT %Q*: UDINT := 0;
    fGapCentrePosition: LREAL;
    iGapCentrePosition AT %Q*: UDINT := 0;
    fEncoderScaling : LREAL := 10000;
    
    northSpGenEnable : MC_ExtSetPointGenEnable;
    northSpGenDisable : MC_ExtSetPointGenDisable;
    southSpGenEnable : MC_ExtSetPointGenEnable;
    southSpGenDisable : MC_ExtSetPointGenDisable;
    
    vgSpGenEnable : MC_ExtSetPointGenEnable;
    vgSpGenDisable : MC_ExtSetPointGenDisable;
    vcSpGenEnable : MC_ExtSetPointGenEnable;
    vcSpGenDisable : MC_ExtSetPointGenDisable;
    
    fNorthSp : LREAL;
    fSouthSp : LREAL;
    fVgSp : LREAL;
    fVcSp : LREAL;
    fNorthVelSp : LREAL;
    fSouthVelSp : LREAL;
    fVgVelSp:LREAL;
    fVcVelSp : LREAL;
    
    northDir : DINT;
    southDir : DINT;
    vgDir : DINT;
    vcDir : DINT;
    
    
    lastCycleSP_North : LREAL;
    lastCycleSP_South : LREAL;
    lastCycleSP_VG : LREAL;
    lastCycleSP_VC : LREAL;
    
    iState : UINT := 0;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[actVirtualAxisPositions();
//IF bEnable THEN

GVL.astAxes[northBlade_ID].stControl.bEnable:=TRUE;
GVL.astAxes[southBlade_ID].stControl.bEnable:=TRUE;
GVL.astAxes[VG_ID].stControl.bEnable:=TRUE;
GVL.astAxes[VC_ID].stControl.bEnable:=TRUE;
GVL.astAxes[5].stControl.bEnable:=TRUE;
GVL.astAxes[6].stControl.bEnable:=TRUE;
GVL.astAxes[VG_ID].stInputs.bLimitBwd := TRUE;
GVL.astAxes[VG_ID].stInputs.bLimitFwd := TRUE;
GVL.astAxes[VC_ID].stInputs.bLimitBwd := TRUE;
GVL.astAxes[VC_ID].stInputs.bLimitFwd := TRUE;
GVL.astAxes[5].stInputs.bLimitBwd := TRUE;
GVL.astAxes[5].stInputs.bLimitFwd := TRUE;
GVL.astAxes[6].stInputs.bLimitBwd := TRUE;
GVL.astAxes[6].stInputs.bLimitFwd := TRUE;

northSpGenEnable(Axis:= GVL.astAxes[northBlade_ID].Axis);
northSpGenEnable.Execute:=FALSE;
southSpGenEnable(Axis:=GVL.astAxes[southBlade_ID].Axis);
southSpGenEnable.Execute:=FALSE;
northSpGenDisable(Axis:= GVL.astAxes[northBlade_ID].Axis);
northSpGenDisable.Execute:=FALSE;
southSpGenDisable(Axis:=GVL.astAxes[southBlade_ID].Axis);
southSpGenDisable.Execute:=FALSE;

vgSpGenEnable(Axis:= GVL.astAxes[3].Axis);
vgSpGenEnable.Execute:=FALSE;
vcSpGenEnable(Axis:=GVL.astAxes[4].Axis);
vcSpGenEnable.Execute:=FALSE;
vgSpGenDisable(Axis:= GVL.astAxes[3].Axis);
vgSpGenDisable.Execute:=FALSE;
vcSpGenDisable(Axis:=GVL.astAxes[4].Axis);
vcSpGenDisable.Execute:=FALSE;

fNorthSp := GVL.astAxes[VC_ID].Axis.NcToPlc.SetPos + (GVL.astAxes[VG_ID].Axis.NcToPlc.SetPos/2);
fSouthSp := GVL.astAxes[VC_ID].Axis.NcToPlc.SetPos - (GVL.astAxes[VG_ID].Axis.NcToPlc.SetPos/2);
fNorthVelSp := GVL.astAxes[VC_ID].Axis.NcToPlc.SetVelo +(GVL.astAxes[VG_ID].Axis.NcToPlc.SetVelo/2) + GVL.astAxes[5].Axis.NcToPlc.SetVelo;
fSouthVelSp := GVL.astAxes[VC_ID].Axis.NcToPlc.SetVelo -(GVL.astAxes[VG_ID].Axis.NcToPlc.SetVelo/2) + GVL.astAxes[6].Axis.NcToPlc.SetVelo;
IF fNorthVelSp>0 THEN
    northDir := 1;
ELSIF fNorthVelSp<0 THEN
    northDir:=-1;
ELSE 
    northDir:=0;
END_IF
IF fSouthVelSp>0 THEN
    SouthDir := 1;
ELSIF fSouthVelSp<0 THEN
    SouthDir:=-1;
ELSE 
    SouthDir:=0;
END_IF

fVgVelSp := GVL.astAxes[1].Axis.NcToPlc.SetVelo - GVL.astAxes[2].Axis.NcToPlc.SetVelo;
fVcVelSp := GVL.astAxes[1].Axis.NcToPlc.SetVelo + GVL.astAxes[2].Axis.NcToPlc.SetVelo;

IF fVgVelSp>0 THEN
    vgDir := 1;
ELSIF fVgVelSp<0 THEN
    vgDir:=-1;
ELSE 
    vgDir:=0;
END_IF
IF fVcVelSp>0 THEN
    vcDir := 1;
ELSIF fVcVelSp<0 THEN
    vcDir:=-1;
ELSE 
    vcDir:=0;
END_IF


fVgSp := GVL.astAxes[northBlade_ID].Axis.NcToPlc.SetPos - GVL.astAxes[southBlade_ID].Axis.NcToPlc.SetPos;
fVcSp := (GVL.astAxes[northBlade_ID].Axis.NcToPlc.SetPos + GVL.astAxes[southBlade_ID].Axis.NcToPlc.SetPos) / 2;



//IF northSpGenEnable.Enabled OR southSpGenEnable THEN
    //
//END_IF

    CASE istate OF
        0:
            IF GVL.astAxes[VG_ID].stStatus.bMoving OR GVL.astAxes[VC_ID].stStatus.bMoving THEN
                iState:=1;
			END_IF
            IF GVL.astAxes[1].stStatus.bMoving OR GVL.astAxes[2].stStatus.bMoving THEN
                iState:=10;
            END_IF
            
        1:
            northSpGenEnable.Execute:=TRUE;
            southSpGenEnable.Execute:=TRUE;
            iState:=2;
        2:
            IF NOT(GVL.astAxes[VG_ID].stStatus.bMoving OR GVL.astAxes[VC_ID].stStatus.bMoving) THEN
                iState:=3;
			END_IF
        3:
            northSpGenDisable.Execute:=TRUE;
            southSpGenDisable.Execute:=TRUE;
            iState:=0;
            
        10:
            vgSpGenEnable.Execute :=TRUE;
            vcSpGenEnable.Execute:=TRUE;
            iState:=11;
        11:
            IF NOT(GVL.astAxes[1].stStatus.bMoving OR GVL.astAxes[2].stStatus.bMoving) THEN
                iState:=12;
			END_IF
        12:
            vgSpGenDisable.Execute :=TRUE;
            vcSpGenDisable.Execute:=TRUE;
            iState:=0;
    
	END_CASE
(*IF (GVL.astAxes[VG_ID].stStatus.bMoving OR GVL.astAxes[VC_ID].stStatus.bMoving) AND NOT(vgSpGenEnable.Enabled OR vcSpGenEnable.Enabled) THEN
    northSpGenEnable.Execute:=TRUE;
    southSpGenEnable.Execute:=TRUE;
END_IF
IF NOT(GVL.astAxes[VG_ID].stStatus.bMoving) AND NOT(GVL.astAxes[VC_ID].stStatus.bMoving) THEN
    northSpGenDisable.Execute:=TRUE;
    southSpGenDisable.Execute:=TRUE;
END_IF
IF GVL.astAxes[1].stStatus.bMoving OR GVL.astAxes[2].stStatus.bMoving AND NOT(northSpGenEnable.Enabled OR southSpGenEnable.Enabled) AND NOT(northSpGenEnable.Execute)  THEN
    vgSpGenEnable.Execute :=TRUE;
    vcSpGenEnable.Execute:=TRUE;
END_IF
IF NOT(GVL.astAxes[1].stStatus.bMoving) AND NOT(GVL.astAxes[2].stStatus.bMoving) THEN
    vgSpGenDisable.Execute :=TRUE;
    vcSpGenDisable.Execute:=TRUE;
END_IF*)




MC_ExtSetPointGenFeed(Axis:= GVL.astAxes[northBlade_ID].Axis, Position:= fNorthSp, Velocity:=fNorthVelSp, Acceleration:=0,Direction:=northDir);
MC_ExtSetPointGenFeed(Axis:= GVL.astAxes[southBlade_ID].Axis, Position:= fSouthSp, Velocity:=fSouthVelSp, Acceleration:=0,Direction:=southDir);
MC_ExtSetPointGenFeed(Axis:= GVL.astAxes[3].Axis, Position:= fVgSp, Velocity:=fVgVelSp, Acceleration:=0,Direction:=vgDir);
MC_ExtSetPointGenFeed(Axis:= GVL.astAxes[4].Axis, Position:= fVcSp, Velocity:=fVcVelSp, Acceleration:=0,Direction:=vcDir);
 



lastCycleSP_North := GVL.astAxes[1].Axis.NcToPlc.SetPos;
lastCycleSP_South := GVL.astAxes[2].Axis.NcToPlc.SetPos;
lastCycleSP_VG := GVL.astAxes[3].Axis.NcToPlc.SetPos;
lastCycleSP_VC := GVL.astAxes[4].Axis.NcToPlc.SetPos;







//END_IF]]></ST>
    </Implementation>
    <Action Name="actVirtualAxisPositions" Id="{84408ed0-12a9-4a20-9ee2-393320dd5a43}">
      <Implementation>
        <ST><![CDATA[(*Calculate virtual axis positions and convert to UDINT.
Conversion to UDINT is prohibited if it would exceed UDINT max value of 4,294,967,295.
If this is not done, it can cause overflow when connected to the encoder input and hard-crash the PLC which will only recover with a power cycle.
To preserve decimal position data of the LREAL (i.e. anything <1mm) it is necessary to scale the value before converting to UDINT.
This can be reversed with the correct scaling at the NC encoder level.
*)
fGapSizePosition := GVL.astAxes[northBlade_ID].stStatus.fActPosition - GVL.astAxes[southBlade_ID].stStatus.fActPosition;
fGapCentrePosition := (GVL.astAxes[northBlade_ID].stStatus.fActPosition + GVL.astAxes[southBlade_ID].stStatus.fActPosition) / 2;


    IF ABS(fGapSizePosition) < 100000 THEN
        iGapSizePosition := LREAL_TO_UDINT(fGapSizePosition*fEncoderScaling);
    END_IF
    IF ABS(fGapCentrePosition) < 100000 THEN
        iGapCentrePosition := LREAL_TO_UDINT(fGapCentrePosition*fEncoderScaling);
    END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="testSlitApp">
      <LineId Id="40" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="55" Count="2" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="69" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="108" Count="7" />
      <LineId Id="107" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="143" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="2" />
      <LineId Id="145" Count="0" />
      <LineId Id="152" Count="5" />
      <LineId Id="151" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="162" Count="12" />
      <LineId Id="160" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="180" Count="1" />
      <LineId Id="184" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="190" Count="1" />
      <LineId Id="193" Count="2" />
      <LineId Id="192" Count="0" />
      <LineId Id="188" Count="1" />
      <LineId Id="196" Count="2" />
      <LineId Id="200" Count="1" />
      <LineId Id="199" Count="0" />
      <LineId Id="202" Count="3" />
      <LineId Id="207" Count="5" />
      <LineId Id="214" Count="1" />
      <LineId Id="213" Count="0" />
      <LineId Id="216" Count="3" />
      <LineId Id="206" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="104" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="128" Count="2" />
      <LineId Id="127" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="93" Count="2" />
      <LineId Id="20" Count="6" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="testSlitApp.actVirtualAxisPositions">
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="2" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="4" Count="6" />
    </LineIds>
  </POU>
</TcPlcObject>