<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_PNEUMATIC_AXIS" Id="{74b90e1e-7e39-4d6d-a9f3-f7a29858f68b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PNEUMATIC_AXIS
VAR
	
    stPneumaticAxisStruct: ST_PneumaticAxisStruct;
    ePneumaticAxisState: E_PneumaticMode;
    fbTimerExtend: TON; //Timing the extraction of the cylinder
    fbTimerRetract: TON; //Timing the retraction of the cylinder
    fbTimerExtendManual: TON; //Timing the extraction of the cylinder
    fbTimerRetractManual: TON; //Timing the retraction of the cylinder
    bStateChange: BOOL := FALSE; //State of the cylinder changed from extend to retract and vice versa
	nTimeToExtract: INT; //allowed time for the cylider to extract in seconds
	nTimeToRetract: INT; //allowed time for the cylinder to retract in seconds

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Single solenoid valve control
//Starting the extraction movement and extraction timing
//LimitBwd is activated and cylinder is not extracted

CASE ePneumaticAxisState OF
    E_PneumaticMode.SINGLE_SOLENOID_PLC:
    Single_Solenoid_PLC();

    E_PneumaticMode.SINGLE_SOLENOID_MANUAL:
    Single_Solenoid_Manual();

    E_PneumaticMode.ERROR:
    Single_Solenoid_Error();

    E_PneumaticMode.RESET:
    Reset();
END_CASE ]]></ST>
    </Implementation>
    <Action Name="Reset" Id="{68a6c9d7-8606-401b-9168-ec931e79f0f6}">
      <Implementation>
        <ST><![CDATA[   stPneumaticAxisStruct.stPneumaticAxisControl.bStartExtend := FALSE;
    stPneumaticAxisStruct.stPneumaticAxisInputs.bExtendCylinderManual := FALSE;
    fbTimerExtend.IN := FALSE;
    fbTimerRetract.IN := FALSE;
    fbTimerExtendManual.IN := FALSE;
    fbTimerRetractManual.IN := FALSE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Single_Solenoid_Error" Id="{f8e38dc6-971b-478e-a924-9eec8537d2f1}">
      <Implementation>
        <ST><![CDATA[stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'ERROR: COMMAND TIMED OUT';]]></ST>
      </Implementation>
    </Action>
    <Action Name="Single_Solenoid_Manual" Id="{e31de170-18f1-4f95-8712-ce861e79ff7b}">
      <Implementation>
        <ST><![CDATA[//Manual control of single solenoid pneumatic actuator

//Enter allowed times for extraction and retraction of pneumatic cylinder in seconds
fbTimerExtendManual.PT := INT_TO_TIME(nTimeToExtract * 1000);
fbTimerRetractManual.PT := INT_TO_TIME(nTimeToRetract * 1000);

//Extend cylinder
        IF stPneumaticAxisStruct.stPneumaticAxisInputs.bExtendCylinderManual AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd THEN
        stPneumaticAxisStruct.stPneumaticAxisStatus.bExtendMoving := TRUE;
        fbTimerExtendManual (IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bExtendMoving);
        IF fbTimerExtendManual.Q THEN
            ePneumaticAxisState := E_PneumaticMode.ERROR;
        END_IF
    END_IF

//Extraction of the cylinder finished, reset timer
        IF stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd THEN
        stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'EXTRACTED';
        bStateChange := TRUE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bExtendMoving := FALSE;
        fbTimerExtendManual (IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bExtendMoving);
    END_IF

//Starting the retraction movement and extraction timing
        IF stPneumaticAxisStruct.stPneumaticAxisInputs.bRetractCylinderManual AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd AND bStateChange THEN
        stPneumaticAxisStruct.stPneumaticAxisInputs.bExtendCylinderManual := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bRetractMoving := TRUE;
        fbTimerRetractManual (IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bRetractMoving);
        IF fbTimerRetractManual.Q THEN
            ePneumaticAxisState := E_PneumaticMode.ERROR;
        END_IF
    END_IF

//Retraction of the cylinder finished, reset timer
        IF stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd THEN
        stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'RETRACTED';
        bStateChange := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bRetractMoving := FALSE;
        fbTimerRetractManual (IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bRetractMoving);
        stPneumaticAxisStruct.stPneumaticAxisInputs.bRetractCylinderManual := FALSE;
    END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Single_Solenoid_PLC" Id="{a75a03ea-ec30-403c-91eb-96684f17a503}">
      <Implementation>
        <ST><![CDATA[//Permit to move cylinder is true
//Enter allowed times for extraction and retraction of pneumatic cylinder in seconds
stPneumaticAxisStruct.stPneumaticAxisInputs.bPermit := TRUE;
fbTimerExtend.PT := INT_TO_TIME(nTimeToExtract * 1000);
fbTimerRetract.PT := INT_TO_TIME(nTimeToRetract * 1000);


IF (stPneumaticAxisStruct.stPneumaticAxisControl.bStartExtend AND stPneumaticAxisStruct.stPneumaticAxisInputs.bPermit) AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd THEN
        stPneumaticAxisStruct.stPneumaticAxisStatus.bExtendMoving := TRUE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bMovingStatus := TRUE;
        fbTimerExtend (IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bExtendMoving);
        IF fbTimerExtend.Q THEN
            ePneumaticAxisState := E_PneumaticMode.ERROR;
        END_IF
    END_IF

// Extraction of the cylinder finished, reset timer
        IF stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd THEN
        stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'EXTRACTED';
        stPneumaticAxisStruct.stPneumaticAxisStatus.bExtractedStatus := TRUE;
        bStateChange := TRUE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bExtendMoving := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bMovingStatus := FALSE;
        fbTimerExtend (IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bExtendMoving);
    END_IF

//Starting the retraction movement and retraction timing
        IF NOT stPneumaticAxisStruct.stPneumaticAxisControl.bStartExtend AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd AND bStateChange THEN
        stPneumaticAxisStruct.stPneumaticAxisStatus.bRetractMoving := TRUE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bMovingStatus := TRUE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bExtractedStatus := FALSE;
        fbTimerRetract (IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bRetractMoving);
        IF fbTimerRetract.Q THEN
            ePneumaticAxisState := E_PneumaticMode.ERROR;
        END_IF
    END_IF

// Retraction of the cylinder finished, reset timer
        IF NOT stPneumaticAxisStruct.stPneumaticAxisControl.bStartExtend AND stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd THEN
        stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'RETRACTED';
        stPneumaticAxisStruct.stPneumaticAxisStatus.bRetractedStatus := TRUE;
        bStateChange := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bRetractMoving := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bMovingStatus := FALSE;
        fbTimerRetract (IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bRetractMoving);
     END_IF

 ]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_PNEUMATIC_AXIS">
      <LineId Id="58" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="138" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="169" Count="2" />
      <LineId Id="200" Count="1" />
      <LineId Id="209" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_PNEUMATIC_AXIS.Reset">
      <LineId Id="2" Count="4" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_PNEUMATIC_AXIS.Single_Solenoid_Error">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_PNEUMATIC_AXIS.Single_Solenoid_Manual">
      <LineId Id="2" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="3" Count="34" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_PNEUMATIC_AXIS.Single_Solenoid_PLC">
      <LineId Id="47" Count="1" />
      <LineId Id="42" Count="2" />
      <LineId Id="46" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="2" Count="6" />
      <LineId Id="1" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="28" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>