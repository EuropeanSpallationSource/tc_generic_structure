<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_Axis_TEST" Id="{3bfca2b4-3b3f-48f2-9900-9d4cd3404e9e}" SpecialFunc="None">
    <Declaration><![CDATA[// Test suite for the FB_Axis POU
{attribute 'call_after_init'}
FUNCTION_BLOCK FB_Axis_TEST EXTENDS tcUnit.FB_TestSuite
VAR
    fbCommon: FB_tcUNIT_common;
    iTargetAxis: INT := 1;  // The <index> of the axis within GVL.axes[<index>] to test against.
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Declare methods defined in the FB_Axis_TEST POU to be included (executed) in the test suite
SetAxisControl_Enabled();
CheckAxisStatus_Moving();
SetAxisConfig_Acceleration();
CheckAxisStatus_NewPosition();
SetAxisControl_Velocity();
SetAxisInputs_bLimitFwd();]]></ST>
    </Implementation>
    <Method Name="CheckAxisStatus_Moving" Id="{f7dcf822-91ec-4555-918f-e2487353578a}">
      <Declaration><![CDATA[METHOD CheckAxisStatus_Moving
VAR
    Result: BOOL;
    ExpectedResult: BOOL;

    nCycle: UINT;
    nMaxCycles: UINT := 30;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('test_GIVEN_new_axis_position_WHEN_execute_move_THEN_axis_moves');

ExpectedResult := TRUE;

fbCommon.mPrepareDefaultMove(iTargetAxis);
fbCommon.mExecute(iTargetAxis);

Result := GVL.axes[iTargetAxis].status.bBusy;

IF nCycle > nMaxCycles OR ExpectedResult = Result THEN
    AssertEquals(Expected := ExpectedResult,
                 Actual := Result,
                 Message := 'Axis is not moving.');
    TEST_FINISHED();
ELSE
    nCycle := nCycle + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckAxisStatus_NewPosition" Id="{604b9446-af57-41db-afac-f53f5b12cc2c}">
      <Declaration><![CDATA[METHOD CheckAxisStatus_NewPosition
VAR
    InitialValue: LREAL;
    Result: LREAL;
    ExpectedResult: LREAL;
    nCycle: UINT;
    nCycleMax: UINT := 100;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('test_GIVEN_new_axis_position_set_WHEN_executed_THEN_axis_moves_to_new_position');

// Since the axis has state; a test might begin the position at some location set by
// a previous test. Therefore if we execute a move we should just check it's moved
// from the initial location not some initial default.

InitialValue := GVL.axes[iTargetAxis].config.fPosition;
ExpectedResult := InitialValue + 10;
GVL.axes[iTargetAxis].config.fPosition := ExpectedResult;

GVL.axes[iTargetAxis].control.eCommand := MotionFunctions.MoveAbsolute;
GVL.axes[iTargetAxis].control.bExecute := TRUE;

Result := GVL.axes[iTargetAxis].status.fActPosition;

IF nCycle > nCycleMax OR ExpectedResult = Result THEN
    AssertEquals(Expected := ExpectedResult,
                 Actual := Result,
                 Message := 'fPosition of the axis is different.');
    TEST_FINISHED();
ELSE
    nCycle := nCycle + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAxisConfig_Acceleration" Id="{2efd2402-6ad3-455d-a703-347847c98522}">
      <Declaration><![CDATA[METHOD SetAxisConfig_Acceleration
VAR
    InitialValue: LREAL;
    Result: LREAL;
    ExpectedResult: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('test_GIVEN_new_axis_acceleration_set_WHEN_executed_THEN_new_axis_acceleration_set');

// example of direct GVL axis reference for assert.

ExpectedResult := tcUNIT_gvl.fDEFAULT_TARGET_ACCELERATION;
fbCommon.mPrepareDefaultMove(iTargetAxis);

Result := GVL.axes[1].config.fAcceleration;

AssertEquals(Expected := ExpectedResult,
             Actual := Result,
             Message := 'fAcceleration of the axis is different.');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAxisControl_Enabled" Id="{749049e6-6152-4a23-ac76-75883bd089b7}">
      <Declaration><![CDATA[METHOD SetAxisControl_Enabled
VAR
    Result: BOOL;
    ExpectedResult: BOOL;
    nCycle: UINT;
    nMaxCycles: UINT := 30;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('test_GIVEN_prepare_default_move_WHEN_move_prepared_THEN_axis_enabled');

// example of test that requires multiple cycles to complete. Due to stateful behaviour of the axis structure.

ExpectedResult := TRUE;
GVL.axes[1].control.bEnable := ExpectedResult;

Result := GVL.axes[iTargetAxis].status.bEnabled;

IF nCycle > nMaxCycles OR ExpectedResult = Result THEN
    AssertEquals(Expected := ExpectedResult,
                 Actual := Result,
                 Message := 'Axis is not enabled.');
    TEST_FINISHED();
ELSE
    nCycle := nCycle + 1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAxisControl_Velocity" Id="{f87270b6-fb94-4214-bb13-17f22f6ab8f5}">
      <Declaration><![CDATA[METHOD SetAxisControl_Velocity
VAR
    InitialValue: LREAL;
    Result: LREAL;
    ExpectedResult: LREAL;

    fDelta: REAL := 0.01;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('test_GIVEN_new_axis_velocity_set_WHEN_executed_THEN_new_axis_velocity_set');

// Example of using a tcUNIT assert for a specific type (in this case LREAL).

InitialValue := GVL.axes[iTargetAxis].config.fVelocity;
ExpectedResult := InitialValue + 0.5;
GVL.Axes[iTargetAxis].config.fVelocity := ExpectedResult;

Result := GVL.axes[iTargetAxis].config.fVelocity;

AssertEquals_LREAL(Expected := ExpectedResult,
                   Actual := Result,
                   Delta := fDelta,
                   Message := 'fVelocity of the axis is different.');
    TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAxisInputs_bLimitFwd" Id="{6304c3b1-9e72-403e-9ae2-a5609b1efe92}">
      <Declaration><![CDATA[METHOD SetAxisInputs_bLimitFwd
VAR
    Result: BOOL;
    ExpectedResult: BOOL;

    nCycle: UINT;
    nMaxCycles: UINT := 30;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('test_GIVEN_prepare_default_move_WHEN_bFwEnabled_prepared_enabled_THEN_bFwEnable_enabled');

ExpectedResult := TRUE;

GVL.axes[iTargetAxis].inputs.bLimitFwd := TRUE;

Result := GVL.axes[iTargetAxis].status.bFwEnabled;

IF nCycle > nMaxCycles OR ExpectedResult = Result THEN
    AssertEquals(Expected := ExpectedResult,
                 Actual := Result,
                 Message := 'Axis bLimitFwd is not enabled.');
    TEST_FINISHED();
ELSE
    nCycle := nCycle + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Axis_TEST">
      <LineId Id="37" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_TEST.CheckAxisStatus_Moving">
      <LineId Id="127" Count="16" />
    </LineIds>
    <LineIds Name="FB_Axis_TEST.CheckAxisStatus_NewPosition">
      <LineId Id="121" Count="21" />
      <LineId Id="56" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_TEST.SetAxisConfig_Acceleration">
      <LineId Id="5" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="25" Count="4" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_TEST.SetAxisControl_Enabled">
      <LineId Id="144" Count="16" />
      <LineId Id="107" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_TEST.SetAxisControl_Velocity">
      <LineId Id="5" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="61" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="86" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_TEST.SetAxisInputs_bLimitFwd">
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="58" Count="6" />
      <LineId Id="57" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>