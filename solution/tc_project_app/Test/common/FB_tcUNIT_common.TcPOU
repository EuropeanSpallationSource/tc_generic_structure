<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_tcUNIT_common" Id="{0f757d3d-99b7-46eb-bdc6-03aa126689f4}" SpecialFunc="None">
    <Declaration><![CDATA[//tcUNIT Common function block: Contains helper methods for tcUNIT.
FUNCTION_BLOCK FB_tcUNIT_common

VAR

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="mDisableAxis" Id="{22a3dd98-69f0-4b92-8109-1b0c2fe2344d}">
      <Declaration><![CDATA[METHOD mDisableAxis: BOOL
VAR_INPUT
    nAxisIndex: UINT; //The idex of the axis to action the method on.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.astAxes[nAxisIndex].stControl.bEnable := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mEnableAxis" Id="{12e91532-7139-4c17-998e-4c670b584b9d}">
      <Declaration><![CDATA[METHOD mEnableAxis: BOOL
VAR_INPUT
    nAxisIndex: UINT; //The idex of the axis to action the method on.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.astAxes[nAxisIndex].stControl.bEnable := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mExecute" Id="{010bd927-5568-40db-a7c5-fcfe995a5cb1}">
      <Declaration><![CDATA[METHOD mExecute: BOOL
VAR_INPUT
    nAxisIndex: UINT; //The idex of the axis to action the method on.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.astAxes[nAxisIndex].stControl.bExecute := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mExecute_SetFALSE" Id="{cc074392-b19d-414a-9010-72a4fa4d5f7a}">
      <Declaration><![CDATA[METHOD mExecute_SetFALSE: BOOL
VAR_INPUT
    nAxisIndex: UINT; //The idex of the axis to action the method on.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.astAxes[nAxisIndex].stControl.bExecute := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGearOut" Id="{65c5860b-0759-45a5-a8a4-27fe9453aa76}">
      <Declaration><![CDATA[METHOD mGearOut : BOOL
VAR_INPUT
    iAxis: UINT;  // The idex of the axis to action the method on.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.astAxes[iAxis].stControl.eCommand := E_MotionFunctions.eGearOut;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mPrepareDefaultMove" Id="{c23244d5-896c-49ad-8d8a-19390856e4dc}">
      <Declaration><![CDATA[METHOD mPrepareDefaultMove

VAR_INPUT
    nAxisIndex: UINT; //The idex of the axis to action the method on.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Prepare an axis so it is ready to action a move using target defaults when executed.

GVL.astAxes[nAxisIndex].stControl.bEnable := TRUE;
GVL.astAxes[nAxisIndex].stControl.eCommand := E_MotionFunctions.eMoveAbsolute;

GVL.astAxes[nAxisIndex].stInputs.bLimitBwd := TRUE;
GVL.astAxes[nAxisIndex].stInputs.bLimitFwd := TRUE;

GVL.astAxes[nAxisIndex].stConfig.fVelocity := tcUNIT_GVL.fDEFAULT_TARGET_VELOCITY;
GVL.astAxes[nAxisIndex].stConfig.fAcceleration := tcUNIT_GVL.fDEFAULT_TARGET_ACCELERATION;
GVL.astAxes[nAxisIndex].stConfig.fDeceleration := tcUNIT_GVL.fDEFAULT_TARGET_DECCELERATION;
GVL.astAxes[nAxisIndex].stConfig.fOverride := tcUNIT_GVL.fDEFAULT_TARGET_OVERRIDE;
GVL.astAxes[nAxisIndex].stConfig.fPosition := tcUNIT_GVL.fDEFAULT_POSITION;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mPrepareGearInMultiMaster" Id="{b94784af-8414-4f79-a0cd-7d3b82710c1e}">
      <Declaration><![CDATA[METHOD mPrepareGearInMultiMaster
VAR_INPUT
    nAxisIndex: UINT;  // The idex of the axis to action the method on.
    astGearAxis: ARRAY[1..4] OF ST_GearAxis;
END_VAR
VAR
    i: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Prepare the axis so it is ready to be coupled
GVL.astAxes[nAxisIndex].stControl.eCommand := E_MotionFunctions.eGearInMultiMaster;
FOR i:= 1 TO tcUNIT_GVL.nMAX_MASTERS DO
    GVL.astAxes[nAxisIndex].stConfig.astMultiMasterAxis[i].nIndex:=astGearAxis[i].nIndex;
    GVL.astAxes[nAxisIndex].stConfig.astMultiMasterAxis[i].fRatio:=astGearAxis[i].fRatio;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="mPrepareHome" Id="{29a1cce2-2fc4-48e1-86f6-27b6dd699cd2}">
      <Declaration><![CDATA[METHOD mPrepareHome
VAR_INPUT
    nAxisIndex: UINT;  // The idex of the axis to action the method on.
    eHomingRoutine: E_HomingRoutines;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.astAxes[nAxisIndex].stControl.eCommand := E_MotionFunctions.eHome;
GVL.astAxes[nAxisIndex].stConfig.eHomeSeq:= eHomingRoutine;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mPrepareMove" Id="{97bd5417-d0a1-4d32-8732-16310a863fcc}">
      <Declaration><![CDATA[METHOD mPrepareMove

VAR_INPUT
    nAxisIndex: UINT; //The idex of the axis to action the method on.
    fTargetVelocity: LREAL;
    fTargetAcceleration: LREAL;
    fTargetDeceleration: LREAL;
    fTargetPosition: LREAL;
    eMotionStrategy: E_MotionFunctions; //The desired MotionFunctions motion strategy.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Prepare the axis so it is ready to action a move when executed for a given motion strategy.

GVL.astAxes[nAxisIndex].stControl.bEnable := FALSE;
GVL.astAxes[nAxisIndex].stControl.eCommand := eMotionStrategy;

GVL.astAxes[nAxisIndex].stInputs.bLimitBwd := TRUE;
GVL.astAxes[nAxisIndex].stInputs.bLimitFwd := TRUE;

GVL.astAxes[nAxisIndex].stConfig.fVelocity := fTargetVelocity;
GVL.astAxes[nAxisIndex].stConfig.fAcceleration := fTargetAcceleration;
GVL.astAxes[nAxisIndex].stConfig.fDeceleration := fTargetDeceleration;
GVL.astAxes[nAxisIndex].stConfig.fPosition := fTargetPosition;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mReset" Id="{59e8bfe4-ab50-4ad3-9095-95e359837091}">
      <Declaration><![CDATA[METHOD mReset : BOOL
VAR_INPUT
    nAxisIndex: UINT;  // The idex of the axis to action the method on.
END_VAR
VAR
    iCycles: UINT;
    iMaxCycles: UINT := 100;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.astAxes[nAxisIndex].stControl.bExecute := FALSE;
FOR iCycles:= 1 TO iMaxCycles DO
    GVL.astAxes[nAxisIndex].stControl.bReset := TRUE;
    IF GVL.astaxes[nAxisIndex].stStatus.bError := FALSE THEN
        EXIT;
    END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSetAxisDefaults" Id="{5b9336be-4414-4858-a614-0fdb2847e171}">
      <Declaration><![CDATA[METHOD mSetAxisDefaults

VAR_INPUT
    nAxisIndex: UINT; //The idex of the axis to action the method on.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Set PLC default values for the axis. Note: Status values can take multiple cycles to updated. This is not an instant reset.

IF GVL.astAxes[nAxisIndex].stStatus.bBusy THEN
    GVL.astAxes[nAxisIndex].stControl.bStop := TRUE;
END_IF
IF GVL.astAxes[nAxisIndex].stStatus.bError THEN
    GVL.astAxes[nAxisIndex].stControl.bReset := TRUE;
END_IF
IF NOT GVL.astAxes[nAxisIndex].stControl.bEnable AND GVL.astAxes[nAxisIndex].stControl.bStop THEN
    GVL.astAxes[nAxisIndex].stControl.bStop := FALSE;
END_IF

GVL.astAxes[nAxisIndex].stControl.bEnable := FALSE;
GVL.astAxes[nAxisIndex].stControl.bExecute := FALSE;
GVL.astAxes[nAxisIndex].stControl.bReset := FALSE;
GVL.astAxes[nAxisIndex].stControl.bJogFwd := FALSE;
GVL.astAxes[nAxisIndex].stControl.bJogBwd := FALSE;
GVL.astAxes[nAxisIndex].stControl.bStop := FALSE;
GVL.astAxes[nAxisIndex].stControl.eCommand := E_MotionFunctions.eMoveAbsolute;

GVL.astAxes[nAxisIndex].stConfig.fVelocity := 0.0;
GVL.astAxes[nAxisIndex].stConfig.fAcceleration := 0.0;
GVL.astAxes[nAxisIndex].stConfig.fDeceleration := 0.0;
GVL.astAxes[nAxisIndex].stConfig.fPosition := 0;
GVL.astAxes[nAxisIndex].stConfig.fOverride := 0.0;
GVL.astAxes[nAxisIndex].stConfig.eHomeSeq := 0;

GVL.astAxes[nAxisIndex].stInputs.bLimitBwd := FALSE;
GVL.astAxes[nAxisIndex].stInputs.bLimitFwd := FALSE;
GVL.astAxes[nAxisIndex].stInputs.bHomeSensor := FALSE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_tcUNIT_common">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mDisableAxis">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mEnableAxis">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mExecute">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mExecute_SetFALSE">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mGearOut">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mPrepareDefaultMove">
      <LineId Id="44" Count="11" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mPrepareGearInMultiMaster">
      <LineId Id="6" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="74" Count="0" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mPrepareHome">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mPrepareMove">
      <LineId Id="17" Count="11" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mReset">
      <LineId Id="21" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="16" Count="4" />
    </LineIds>
    <LineIds Name="FB_tcUNIT_common.mSetAxisDefaults">
      <LineId Id="50" Count="28" />
      <LineId Id="26" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>